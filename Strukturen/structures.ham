/*imperative program*//*

- vor()      - void    -> Hamster geht einen schritt vor
- linksUm()  - void    -> Hamster dreht sich nach links
- nimm()     - void    -> Hamster nimmt ein Korn auf
- gib()      - void    -> Hamster gibt ein Korn ab
- vornFrei() - boolean -> das Feld vor Hamster ist frei (true) oder blockiert (false)
- kornDa()   - boolean -> auf dem Feld des Hamsters befindet sich ein Korn
- maulLeer() - boolean -> Das Maus des Hamsters ist Leer (Er traegt kein Korn)

- boolean                -> Wahrheitswert
- byte, short, int, long -> Ganzzahl
- float, double          -> Kommazahl
- char, String(*)        -> Zeichen(-Kette*)

- if(){}else if(){}else{} -> (verzweigte) Anfrage
- while(){}               -> While Schleife
- for(){}                 -> zaehlende Schleife

*/

void main()
{
	vor(); // Hamster geht einen schritt vor
	if(kornDa()) nimm(); // Wenn sich ein Korn auf dem Feld befindet -> Hamster nimmt ein Korn auf
	
	vor(); // Hamster geht einen schritt vor
	if(kornDa())	{ nimm(); } // Wenn sich ein Korn auf dem Feld befindet -> Hamster nimmt ein Korn auf
	else { // ... ansonsten
		linksUm(); // Hamster dreht sich nach links
		linksUm(); // Hamster dreht sich nach links
		linksUm(); // Hamster dreht sich nach links
	}
	
	vor(); // Hamster geht einen schritt vor
	if(kornDa()) // Wenn sich ein Korn auf dem Feld befindet ->
	{
		nimm(); // Hamster nimmt ein Korn auf
	}
	else // ... ansonsten
	{
		linksUm(); // Hamster dreht sich nach links
		linksUm(); // Hamster dreht sich nach links
		linksUm(); // Hamster dreht sich nach links
		linksUm(); // Hamster dreht sich nach links
	}

	/*
	
	wenn ... sonst wenn ... sonst
	
	if (BEDINGUNG[EN])
	{
		ANWEISUNG[EN];
	} 
	else if (BEDINGUNG[EN])
	{
		ANWEISUNG[EN];
	}
	else 
	{
		ANWEISUNG[EN];
	}
	*/
	
	vor(); // Hamster geht einen schritt vor
	while(kornDa()) nimm(); // Solange sich ein Korn auf dem Feld befindet -> Hamster nimmt ein Korn auf
	
	vor(); // Hamster geht einen schritt vor
	while(kornDa()) // Solange sich ein Korn auf dem Feld befindet 
	{
		nimm(); // Hamster nimmt ein Korn auf
	}
	
	/*
	
	solange ...
	
	while (BEDINGUNG[EN])
	{
		ANWEISUNG[EN];
	}
	
	do
	{
		ANWEISUNG[EN];
	}
	while (BEDINGUNG[EN]);
	
	*/
	
	vor(); // Hamster geht einen schritt vor
	for(int i = 0; i < 3; i++) //
	{
		nimm(); // Hamster nimmt ein Korn auf
	}
	
	vor(); // Hamster geht einen schritt vor
	int a; // Deklariere Variable von Typ int
	for(a = 0; a < 2;) //
	{
		nimm(); // Hamster nimmt ein Korn auf
		a++; // inkrementiere Variable a
	}
	
	vor(); // Hamster geht einen schritt vor
	int b = 0; // Deklariere und Initialisiere Variable von Typ int
	for(; b <= 3; b++) //
	{
		nimm(); // Hamster nimmt ein Korn auf
	}
	
	/*
	for(INITIALISIERUNG; BEDINGUNG[EN]; UPDATE)
	{
		ANWEISUNG[EN];
	}
	*/
	
	//////////////////////////////////////////
	
	/*
	int a ...
	boolean b ...
	
	(a > 4 && !b) -> a groesser 4 und b ist false
	(a == 0 || b) -> a ist gleich 0 oder b ist true
	
	((a > 3 && b)||(a <= -4 && !b)) ...
	*/
}




