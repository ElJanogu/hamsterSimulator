/*imperative program*//*

- vor()      - void
- linksUm()  - void
- nimm()     - void
- gib()      - void
- vornFrei() - boolean
- kornDa()   - boolean
- maulLeer() - boolean

- boolean
- byte, short, int, long
- float, double
- char, String

- if(){}else if(){}else{}
- while(){}
- for(){}

*/

void main()
{
	/* TEST A */
	//sucheLuecke();
	
	/* TEST B */
	//int steps = 0;
	//steps = countStepsToCorn();
	//turn();
	//vorX(steps);
	//turn();
	
	/* TEST C */
	//int steps = 0;
	//steps = countStepsToWall();
	//turn();
	//vorX(steps);
	//turn();
}

void rechtsUm() // Deklariere Funktion von Typ void (kein Rückgabetyp), ohne Parameter
{
	linksUm(); // Hamster dreht sich nach links
	linksUm(); // Hamster dreht sich nach links
	linksUm(); // Hamster dreht sich nach links
}

void vorX(int number) // Deklariere Funktion von Typ void (kein Rückgabetyp), mit Parameter number von Typ int
{
	for(int i = 0; i < number; i++)
	{
		if(vornFrei())	vor(); // Wenn vorne Frei -> Hamster geht ein Feld vor
	}
}

void vorBisWand() // Deklariere Funktion von Typ void (kein Rückgabetyp), ohne Parameter
{
	while(vornFrei()) vor(); // Solange vorne Frei -> Hamster geht ein Feld vo
}

void turn() // Deklariere Funktion von Typ void (kein Rückgabetyp), ohne Parameter
{
	linksUm(); // Hamster dreht sich nach links
	linksUm(); // Hamster dreht sich nach links
}

int countStepsToWall()  // Deklariere Funktion von Typ int, ohne Parameter
{
	int count = 0; // Deklariere und Initialisiere Variable count von typ int
	while(vornFrei()) // Solange vorne frei ....
	{
		vor(); // Hamster geht ein Feld vor
		count++; // inkrementiere Variable count um den Wert 1
	}
	
	return count; // gebe den Wert von count als Funktionswert zurueck
}

int countStepsToCorn()// Deklariere Funktion von Typ int, ohne Parameter
{
	int count = 0; // Deklariere und Initialisiere Variable count von typ int
	while(!kornDa()) // solange sich kein Korn auf dem Feld befindet ....
	{
		vor(); // Hamster geht ein Feld vor
		count++; // inkrementiere Variable count um den Wert 1
	}
	
	return count; // gebe den Wert von count als Funktionswert zurueck
}

boolean linksFrei()// Deklariere Funktion von Typ boolean, ohne Parameter
{
	boolean b = false; // Deklariere und Initialisiere die Variable b von typ boolean
	
	linksUm(); // Hamster dreht sich nach links
	b = vornFrei(); // in b wird gespeichert ob das vordere Feld frei ist
	rechtsUm(); // Hamster dreht sich nach rechts (Funktionsaufruf)
	
	return b; // gebe Wert der Variable b als Funktionswert zurueck
}

void sucheLuecke() // Deklariere Funktion von Typ void (kein Rückgabetyp), ohne Parameter
{
	while(vornFrei()){ // solange vorne frei ....
		if(linksFrei()) // Wenn links frei .....
		{
			linksUm(); // Hamster dreht sich nach links
			vor(); // Hamster geht ein Feld nach vorne
			break; // abbruch der while-schleife
		}
		else // .. ansonsten
		{
			vor(); // Hamster geht ein Feld nach vorne
		}
	}
	
}



